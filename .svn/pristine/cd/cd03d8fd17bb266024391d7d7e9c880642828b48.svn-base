package test;

import static org.junit.Assert.*;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Arrays;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import commands.ChangeDirectory;
import commands.MakeDirectory;
import filesystem.Directory;
import filesystem.FileSystem;
import handling.PathHandler;

public class MakeDirectoryTest {

	PathHandler phObj;
	MakeDirectory mkdirObj;
	FileSystem fs;
	
	@Before
	public void setUp() throws Exception {
		 mkdirObj = new MakeDirectory(new int[] {-2});
		 fs = FileSystem.getInstance();
		 phObj = new PathHandler();
	}
	
  @After
  public void tearDown() throws Exception
  {
	 // reset FileSystem instance to empty after each test
    Field field = (fs.getClass()).getDeclaredField("shellInstance");
    field.setAccessible(true);
    field.set(null, null); //setting the shellInstance parameter to null
  }
  
  @Test
	public void executeTestNoPath() {
	  	// make directory and get the made directory
	  	ArrayList<Directory> dirList = mkdirObj.execute(new String[]{"dir1"});
	  	Directory dir1 = (Directory)
	  			fs.getRootDirectory().getSubFile("dir1");
	  	// test if the made directory exist
		assertEquals(dir1, dirList.get(0));
	}
  
  @Test
	public void executeTestWithPath() {
	  	// get list of directories that was made
	  	ArrayList<Directory> dirList = mkdirObj.execute(
	  			new String[]{"dir1 dir1/dirInsideDir1"});
	  	
	  	// get the excepted directories as a list
	  	Directory dir1 = (Directory)
	  			fs.getRootDirectory().getSubFile("dir1");
	  	Directory dirInsideDir1 = (Directory) dir1.getSubFile("dirInsideDir1");
	  	
	  	ArrayList<Directory> exceptedList = new ArrayList<Directory>(
	  			Arrays.asList(dir1, dirInsideDir1));
	  	
	  	// compare the two list
		assertEquals(dirList, exceptedList);
	}
  
  @Test
	public void executeTestInvalidPath() {
	  	// get list of directories that was made
	  	ArrayList<Directory> dirList = mkdirObj.execute(
	  			new String[]{"dir1 dir1/badPath/dirInsideDir1"});
	  	
	  	// get the excepted directories as a list
	  	Directory dir1 = (Directory)
	  			fs.getRootDirectory().getSubFile("dir1");
	  	
	  	// second directory should be null because it has a bad path
	  	ArrayList<Directory> exceptedList = new ArrayList<Directory>(
	  			Arrays.asList(dir1, null));
	  	
	  	// compare the two list
		assertEquals(dirList, exceptedList);
	}
  
  

}
