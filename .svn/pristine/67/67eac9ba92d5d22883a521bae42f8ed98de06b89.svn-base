// **********************************************************
// Assignment2:
// Student1: Marcus Pasquariello
// UTORID user_name: pasqua39
// UT Student #: 1006258477
// Author: Marcus Pasquariello
//
// Student2: Aliel Jacob Roxas
// UTORID user_name: roxasal1
// UT Student #: 1005954781
// Author: Aliel Jacob Roxas
//
// Student3: Danny Liu
// UTORID user_name: liuhai6
// UT Student #: 1004258000
// Author: Danny Liu
//
// Student4: Brandon Lam
// UTORID user_name: lambran3
// UT Student #: 1003383484
// Author: Brandon Lam
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************

package commands;

import filesystem.Directory;
import filesystem.FileSystem;
import handling.InputParser;

/**
 * This class is responsible for changing current directory on the mock shell
 * given a target directory, change that to the current working directory.
 * 
 * @author Marcus, Danny
 *
 */
public class ChangeDirectory extends Command {

  /**
   * Setup the valid argument counts for changeDirectory and its documentation.
   * 
   * @param validArgumentCounts Stores all the valid number of Argument counts
   *        for changeDirectory
   */
  public ChangeDirectory(int[] validArgumentCounts) {
    super(validArgumentCounts);
    this.documentation = "cd DIR"
        + "\n\tChange directory to DIR, which may be relative to the current "
        + "\n\tdirectory or may be a full path.";
  }


  /**
   * Changes the current directory, with the help of parser to get the directory
   * and error checking class for potential errors.
   * 
   * @param shellInput Arrays of command arguments
   */
  public Directory execute(String[] shellInput) {

    FileSystem fileSystem = FileSystem.getInstance();
    InputParser parser = FileSystem.getInstance().getParser();
    String[] arguments = super.getArguments(shellInput);

    // check for argument counts
    super.execute(arguments);
    if (!isCountValid) {
      return null;
    }

    // get the target directory, check if it's valid then change it to current.

    String path = arguments[0];

    Directory newWorkingDir = parser.parsePathToDirectory(path);

    if (newWorkingDir == null) {
      return null;
    } else {
      fileSystem.setWorkingDirectory(newWorkingDir);
    }
    return newWorkingDir;
  }
}
