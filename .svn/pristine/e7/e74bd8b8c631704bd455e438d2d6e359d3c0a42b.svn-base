// **********************************************************
// Assignment2:
// Student1: Marcus Pasquariello
// UTORID user_name: pasqua39
// UT Student #: 1006258477
// Author: Marcus Pasquariello
//
// Student2: Aliel Jacob Roxas
// UTORID user_name: roxasal1
// UT Student #: 1005954781
// Author: Aliel Jacob Roxas
//
// Student3: Danny Liu
// UTORID user_name: liuhai6
// UT Student #: 1004258000
// Author: Danny Liu
//
// Student4: Brandon Lam
// UTORID user_name: lambran3
// UT Student #: 1003383484
// Author: Brandon Lam
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************

package test;

import static org.junit.Assert.*;

import java.lang.reflect.Field;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import commands.ChangeDirectory;
import commands.MakeDirectory;
import filesystem.Directory;
import filesystem.FileSystem;

public class ChangeDirectoryTest {
	
	ChangeDirectory cdObj;
	MakeDirectory mkdirObj;
	FileSystem fs;
	
	@Before
	public void setUp() throws Exception {
		 cdObj = new ChangeDirectory(new int[] {1});
		 mkdirObj = new MakeDirectory(new int[] {-2});
		 fs = FileSystem.getInstance();
	}
	
  @After
  public void tearDown() throws Exception {
	 // reset FileSystem instance to empty after each test
    Field field = (fs.getClass()).getDeclaredField("shellInstance");
    field.setAccessible(true);
    field.set(null, null); //setting the shellInstance parameter to null
  }
	
  @Test
	public void executeTestNoPath() {
	  	// need to make directory  to test ChangeDirectory 
		mkdirObj.execute(new String[]{"dir1"});
		Directory dir = cdObj.execute(new String[]{"dir1"});
		assertEquals(fs.getWorkingDirectory(), dir);
	}
	
	@Test
	public void executeTestWithPath() {
		// make directories so can test ChangeDirectory 
		mkdirObj.execute(new String[]{"dir1"});
		mkdirObj.execute(new String[]{"dir1/dirInsideDir1"});
		Directory dir = cdObj.execute(new String[]{"dir1/dirInsideDir1"});
		assertEquals(fs.getWorkingDirectory(), dir);
	}
	
	@Test
	public void executeTestNoChange() {
		/*
		 *  if ChangeDirectory to a non-existing directory, 
		 *  workingDirectory shouldn't change
		 */
		cdObj.execute(new String[]{"dir1"});
		assertEquals(fs.getWorkingDirectory(), fs.getRootDirectory());
	}
	
}
