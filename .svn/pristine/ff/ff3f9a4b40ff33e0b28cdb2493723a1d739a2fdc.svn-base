// **********************************************************
// Assignment2:
// Student1: Marcus Pasquariello
// UTORID user_name: pasqua39
// UT Student #: 1006258477
// Author: Marcus Pasquariello
//
// Student2: Aliel Jacob Roxas
// UTORID user_name: roxasal1
// UT Student #: 1005954781
// Author: Aliel Jacob Roxas
//
// Student3: Danny Liu
// UTORID user_name: liuhai6
// UT Student #: 1004258000
// Author: Danny Liu
//
// Student4: Brandon Lam
// UTORID user_name: lambran3
// UT Student #: 1003383484
// Author: Brandon Lam
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************
package handling;

import filesystem.Directory;
import filesystem.File;
import filesystem.FileSystem;

/**
 * This class help to break down path into useful info we need.
 * 
 * @author Brandon, Danny
 *
 */
public class PathHandler {

  /**
   * This method traverse through the given path(only for directory path), while
   * Checking its validity on the way and at the end return the file Object if
   * traversal is successful.
   * 
   * @param path The path to do the traversal on
   * @param fileNumber Which file to find on the path, -1 means the very last
   *        file, -2 the second, etc.
   * @return Returns the desired directory on the path
   */
  public Directory traverse(String path, int fileNumber) {

    // Get starting directory, either the root or current working directory
    Directory startingDir = getStartingDir(path);
    
    // split path into readable file names
    String[] splitedPath = analyzePath(path);
    
    /*
     *  get the number of iteration in the path 
     *  depending on the file number given
     */
    int numberOfIteration;
    if (fileNumber < 0) {
      numberOfIteration = splitedPath.length + fileNumber + 1;
    } else {
      numberOfIteration = fileNumber;
    }

    Directory tempDir = startingDir;
    
    // Iterate through the path
    for (int ind = 0; ind < numberOfIteration; ind++) {
      tempDir = traverseHelper(tempDir, splitedPath[ind]);

      if (tempDir == null) {
        return null;
      }
    }

    return tempDir;
  }

  
  /**
   * traverse through the level of a path given a current directory to 
   * traverse in and a path argument. The path argument can be 
   * a file name or special operator like "." or "..".
   * 
   * @param curDir
   * @param pathArg
   * @return
   */
  private Directory traverseHelper(Directory curDir, String pathArg) {
    // traverse through the given pathOfDir and return the last DirObj
    // If path argument is "." then do not change tempDir

    if (pathArg.equals(".")) {
      return curDir;
    }
    // If path argument is ".." go to parent directory
    else if (pathArg.equals("..")) {
      // Check if parent directory exists (case of root directory)
      if (curDir.getParentDirectory() == null) {
        return curDir;
      }
      // Set tempDir to it's parent directory
      else {
        curDir = curDir.getParentDirectory();
      }
    } else if (curDir.getSubFile(pathArg) == null
        || (curDir.getSubFile(pathArg) instanceof File)) {
      /*
       * path name not found or (path is a fileName and not the last one)
       */
      return null;
    } else {
      curDir = (Directory) curDir.getSubFile(pathArg);
    }
    return curDir;
  }

  private Directory getStartingDir(String path) {
    if ((Character.toString(path.charAt(0))).equals("/")) {
      // absolute path start from root dir
      return FileSystem.getInstance().getRootDirectory();
    } else {
      // relative path start from current dir
      return FileSystem.getInstance().getWorkingDirectory();
    }
  }

  public String getPath(Directory fo) {
    /*
     * resultPath start with the name of the file given at the end of path, and
     * build toward the root. (append at front for each level)
     */
	  
    FileSystem fileSystem = FileSystem.getInstance();
    StringBuilder resultPath = new StringBuilder("");
    Directory tempDir = fo;

    // for root directory, return "/" only
    if (tempDir.equals(fileSystem.getRootDirectory())) {
      return "/";
    }
    // stop before root
    while (!(tempDir.equals(fileSystem.getRootDirectory()))) {
      // build path backward until reach the root

      resultPath.insert(0, "/" + tempDir.getName());
      tempDir = tempDir.getParentDirectory();
    }

    return resultPath.toString();
  }


  public String getName(String path, int index) {
    // this method get the name of file in path at a specific index
    // if count from right to left, then it's -1, -2,-3...
    FileSystem fileSystem = FileSystem.getInstance();
    boolean isRoot = path.trim().startsWith("/");
    String[] splitedPath = analyzePath(path);
    
    // for path "/"
    if (splitedPath.length == 0) {
    	if (isRoot) {
    		return fileSystem.getRootDirectory().getName();
    	} else {
    		return fileSystem.getWorkingDirectory().getName();
    	}
    }
    
    if (index < 0) {
      return splitedPath[splitedPath.length + index];
    } else {
      return splitedPath[index];
    }
  }
  
  /**
   * 
   * @param path
   * @return
   */
  public String[] analyzePath(String path) {
	  	FileSystem fileSystem = FileSystem.getInstance();
	  	
	  	// if path only contains slashes, the length of splitedPath is 1 NOT 0 
	    String[] splitedPath = path.replace('/', ' ').trim().split("\\s+");
	    
	    
	    if (path.trim().length() == 0 || 
	    		(splitedPath.length == 1 && splitedPath[0].equals(""))) {
	    	return new String[0];
	    } else {
	    	return splitedPath;
	    }
  }
  
  /**
   * Get how many level deep the path is. For example, "/" and "file/" is 
   * one level deep, "dir1/dir2/dir3 is 3 level deep
   * @param path  This is the path to get the level for
   * @return  This return the level number for the path
   */
  public int getLevel(String path) {
	  	  // simplify the path
	  	  path = path.trim().replaceAll("\\/+", "/");
		 if (path.equals("/")) {
			 // if the argument contain only slashes
			 return 1;
		 } 
		 return path.split("/").length;
  }

}
