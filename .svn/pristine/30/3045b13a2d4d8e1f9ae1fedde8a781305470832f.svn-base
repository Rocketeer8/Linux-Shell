// **********************************************************
// Assignment2:
// Student1: Marcus Pasquariello
// UTORID user_name: pasqua39
// UT Student #: 1006258477
// Author: Marcus Pasquariello
//
// Student2: Aliel Jacob Roxas
// UTORID user_name: roxasal1
// UT Student #: 1005954781
// Author: Aliel Jacob Roxas
//
// Student3: Danny Liu
// UTORID user_name: liuhai6
// UT Student #: 1004258000
// Author: Danny Liu
//
// Student4: Brandon Lam
// UTORID user_name: lambran3
// UT Student #: 1003383484
// Author: Brandon Lam
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************

package commands;

import filesystem.Directory;
import filesystem.File;
import filesystem.FileObj;
import filesystem.FileSystem;
import handling.InputParser;
import handling.StandardError;

/**
 * This class is responsible for copying a file or directory in the file system
 * given the path of the destination directory to be copied to.
 * 
 * @author Brandon
 */
public class Copy extends Command {

  public Copy(int[] validArgumentCounts) {
    super(validArgumentCounts);
  }

  // recursive helper function to create a copy of a FileObj
  public FileObj replicateFileObj(FileObj objToCopy) {
    FileObj result;
    if (objToCopy instanceof File) {
      File fileToCopy = (File) objToCopy;
      File replicaFile = new File(fileToCopy.getName());
      replicaFile.addToTextContent(fileToCopy.toString());
      
      result = (FileObj) replicaFile;
    } else {
      Directory dirToCopy = (Directory) objToCopy;
      Directory replicaDir = new Directory(dirToCopy.getName());
      for (String i : dirToCopy.subFileNameList()) {
        FileObj replicaSubFile = dirToCopy.getSubFile(i);
        replicaDir.addToDir(replicateFileObj(replicaSubFile));
      }
      result = (FileObj) replicaDir;
    }
    return result;
  }

  public void execute(String[] shellInput) {
    // Check if DIR given is in Current Working Directory of one of it's parents
    
    InputParser parser = FileSystem.getInstance().getParser();
    StandardError errorHandler = FileSystem.getInstance().getErrorHandler();
    String[] arguments = super.getArguments(shellInput);
    super.execute(arguments);
    if (!isCountValid) {
      return;
    }
    
    // get target item to copy
    FileObj itemToCopy = parser.parsePathToFileObj(arguments[0]);
    // get destination to copy to
    FileObj destination = parser.parsePathToFileObj(arguments[1]);
    // if the item or destination doesn't exist, return.
    if (itemToCopy == null || destination == null) {
      return;
    }
    if (destination instanceof File) {
      // for a file as a destination, do not copy item
      return;
    } else {
      Directory destinationDir = (Directory) destination;
      FileObj copyOfItem = replicateFileObj(itemToCopy);
      destinationDir.addToDir(copyOfItem);
      
    }
  }
}
