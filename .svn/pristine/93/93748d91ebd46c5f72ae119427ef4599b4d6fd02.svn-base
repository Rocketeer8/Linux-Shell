package test;

import static org.junit.Assert.*;

import java.lang.reflect.Field;
import java.util.HashMap;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import commands.Command;
import commands.MakeDirectory;
import driver.JShell;
import filesystem.Directory;
import filesystem.File;
import filesystem.FileSystem;
import handling.InputParser;
import mock_classes.MockPathHandler;
import mock_classes.MockStandardError;

public class InputParserTest {
	
	MakeDirectory mkdirObj;
	FileSystem fs;
	InputParser parser;
	
	@Before
	public void setUp() throws Exception {
		 mkdirObj = new MakeDirectory(new int[] {-2});
		 fs = FileSystem.getInstance();
		 // inject mock objects
		 parser = new InputParser(
				 new MockStandardError(), new MockPathHandler());
	}
	
  @After
  public void tearDown() throws Exception {
	 // reset FileSystem instance to empty after each test
    Field field = (fs.getClass()).getDeclaredField("shellInstance");
    field.setAccessible(true);
    field.set(null, null); //setting the shellInstance parameter to null
  }
  
  @Test
  public void parsePathToFileTest() {
	  // make a file and test parse path to a file
	  File fileA = new File("FileName");
	  fs.getRootDirectory().addToDir(fileA);
	  assertEquals(fileA, parser.parsePathToFile("/FileName"));
  }
  
  @Test
  public void parsePathToFileObjTestForFile() {
	  // make directories and a file and test parse path to a file
	  mkdirObj.execute(new String[] {"dir1 dir1/dir2"});
	  
	  Directory dir1 = (Directory) fs.getRootDirectory().getSubFile("dir1");
	  Directory dir2 = (Directory) dir1.getSubFile("dir2");
	  
	  File fileA = new File("FileName");
	  dir2.addToDir(fileA);
	  
	  assertEquals(fileA, 
			  parser.parsePathToFileObj("/dir1/dir2/FileName"));
  }
  
  @Test
  public void parsePathToFileObjTestForDirectory() {
	  // make directories and test parse path to a directory
	  mkdirObj.execute(new String[] {"dir1 dir1/dir2 dir1/dir2/FileName"});
	  
	  Directory dir1 = (Directory) fs.getRootDirectory().getSubFile("dir1");
	  Directory dir2 = (Directory) dir1.getSubFile("dir2");
	  Directory dir3 = (Directory) dir2.getSubFile("FileName");
	  
	  assertEquals(dir3, 
			  parser.parsePathToFileObj("/dir1/dir2/FileName"));
  }
  
  @Test
  public void parsePathToDirectoryTest() {
	  // make directories and test parse path to a directory
	  mkdirObj.execute(new String[] {"dir1 dir1/FileName"});
	  
	  Directory dir1 = (Directory) fs.getRootDirectory().getSubFile("dir1");
	  Directory dir2 = (Directory) dir1.getSubFile("FileName");
	  
	  assertEquals(dir2, 
			  parser.parsePathToDirectory("dir1/FileName"));
  }
  
  @Test
  public void parsePathToSecondLastDirectoryTest() {
	  // make directories and test parse path to a second last directory
	  mkdirObj.execute(new String[] {"dir1 dir1/FileName dir1/FileName/dir3"});
	  
	  Directory dir1 = (Directory) fs.getRootDirectory().getSubFile("dir1");
	  Directory dir2 = (Directory) dir1.getSubFile("FileName");
	  
	  assertEquals(dir2, 
			  parser.parsePathToSecondLastDirectory("dir1/FileName/dir3"));
  }
  
  @Test
  public void parsePathToNameTest() {
	  /*
	   *  given a path, 
	   *  test if parsePathToName() return the name of target file
	   */
	  assertEquals("FileName", parser.parsePathToName("/dir1/dir2/FileName"));
  }
  
  @Test
  public void parseNumberArgumentToNumberTest() {
	  // test if a given number in string can be parse to an integer
	  assertEquals(3, parser.parseNumberArgumentToNumber("3"));
  }
  
  @Test
  public void parseStringArgumentToStringTest() {
	  /*
	   *  test if extra double quotation inside string can be deleted 
	   *  with parseStringArgumentToString()
	   */
	  assertEquals("some string", 
			  parser.parseStringArgumentToString("\"some string\""));
  }
  
  @Test
  public void parseCommandArgumentToCommandTest() {
	  /*
	   *  Given a command name in string, test if it's valid and 
	   *  return the instance of the command if it is 
	   */
	  
	  // initialize the command HashMap and put a command in it for testing
	  HashMap<String, Command> testCommands = new HashMap<String, Command>();
	  testCommands.put("mkdir", mkdirObj);
	  // set the JShell commands to our test command HashMap
	  JShell.setCommands(testCommands);
	  
	  assertEquals(mkdirObj, 
			  parser.parseCommandArgumentToCommand("mkdir"));
  }
}
