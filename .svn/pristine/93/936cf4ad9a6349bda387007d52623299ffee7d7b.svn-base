// **********************************************************
// Assignment2:
// Student1: Marcus Pasquariello
// UTORID user_name: pasqua39
// UT Student #: 1006258477
// Author: Marcus Pasquariello
//
// Student2: Aliel Jacob Roxas
// UTORID user_name: roxasal1
// UT Student #: 1005954781
// Author: Aliel Jacob Roxas
//
// Student3: Danny Liu
// UTORID user_name: liuhai6
// UT Student #: 1004258000
// Author: Danny Liu
//
// Student4: Brandon Lam
// UTORID user_name: lambran3
// UT Student #: 1003383484
// Author: Brandon Lam
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************
package commands;

import java.util.Stack;
import filesystem.Directory;
import filesystem.FileSystem;
import handling.InputParser;

/**
 * The PushDirectory class is a Command that pushes the
 * working directory onto the directory stack then changes
 * the new working directory to a given directory.
 */
public class PushDirectory extends Command {

  /**
   * Constructs a new PushDirectory with its
   * valid argument counts and documentation.
   *
   * @param validArgumentCounts Stores all the valid argument counts
   *                            for PushDirectory
   */
  public PushDirectory(int[] validArgumentCounts) {
    super(validArgumentCounts);
    this.documentation = "pushd DIR"
        + "\n\tSaves the current working directory by pushing onto directory "
        + "\n\tstack and then changes the new current working directory to DIR.";
  }

  /**
   * If the size of arguments is in validArgumentCounts then
   * this pushes workingDirectory onto the directoryStack and
   * sets dirStack as the new workingDirectory.
   *
   * @param shellInput An array of arguments for the command.
   */
  @Override
  public void execute(String[] shellInput) {
    FileSystem fileSystem = FileSystem.getInstance();
    InputParser parser = fileSystem.getParser();

    // Splits the arguments of shellInput into an array of arguments
    String[] arguments = super.getArguments(shellInput);

    // Checks if the arguments is a valid argument count
    super.execute(arguments);
    
    if (!isCountValid) {
      return;
    }

    Stack<Directory> dirStack = fileSystem.getDirectoryStack();
    // Checks if argument is a directory
    Directory dir = parser.parsePathToDirectory(arguments[0]);

    if (dir != null) {
      dirStack.add(fileSystem.getWorkingDirectory());
      fileSystem.setWorkingDirectory(dir);
    }
  }
}
