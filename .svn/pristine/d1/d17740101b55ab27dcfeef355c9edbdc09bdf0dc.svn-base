// **********************************************************
// Assignment2:
// Student1: Marcus Pasquariello
// UTORID user_name: pasqua39
// UT Student #: 1006258477
// Author: Marcus Pasquariello
//
// Student2: Aliel Jacob Roxas
// UTORID user_name: roxasal1
// UT Student #: 1005954781
// Author: Aliel Jacob Roxas
//
// Student3: Danny Liu
// UTORID user_name: liuhai6
// UT Student #: 1004258000
// Author: Danny Liu
//
// Student4: Brandon Lam
// UTORID user_name: lambran3
// UT Student #: 1003383484
// Author: Brandon Lam
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************
package filesystem;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Stack;
import commands.ChangeDirectory;
import commands.Command;
import commands.Concatenate;
import commands.Echo;
import commands.Exit;
import commands.History;
import commands.ListContent;
import commands.MakeDirectory;
import commands.Manual;
import commands.PopDirectory;
import commands.PrintWorkingDirectory;
import commands.PushDirectory;
import handling.InputParser;
import handling.PathHandler;
import handling.StandardError;

public class FileSystem {

  private static FileSystem shellInstance;

  private Directory rootDirectory;
  private Directory workingDirectory;
  private HashMap<String, Command> commands;
  private InputParser parser;
  private StandardError errorHandler;
  private PathHandler pathHandler;
  private ArrayList<String> commandHistory;
  private Stack<Directory> directoryStack;

  private FileSystem() {
    this.rootDirectory = new Directory("/");
    this.workingDirectory = rootDirectory;
    this.parser = new InputParser();
    this.errorHandler = new StandardError();
    this.pathHandler = new PathHandler();
    this.commands = new HashMap<String, Command>();
    this.commandHistory = new ArrayList<String>();
    directoryStack = new Stack<Directory>();
    initializeCommands();
  }

  
  
  public static FileSystem getInstance() {
    if (shellInstance == null) {
      shellInstance = new FileSystem();
    }
    return shellInstance;
  }

  private void initializeCommands() {
    commands.put("exit", new Exit(new int[] {0}));
    commands.put("mkdir", new MakeDirectory(new int[] {2}));
    commands.put("ls", new ListContent(new int[] {-1}));
    commands.put("history", new History(new int[] {0, 1}));
    commands.put("pushd", new PushDirectory(new int[] {1}));
    commands.put("popd", new PopDirectory(new int[] {0}));
    commands.put("pwd", new PrintWorkingDirectory(new int[] {0}));
    commands.put("man", new Manual(new int[] {-2}));
    commands.put("cat", new Concatenate(new int[] {-2}));
    commands.put("cd", new ChangeDirectory(new int[] {1}));
    commands.put("echo", new Echo(new int[] {1, 2, 3}));

  }

  public Directory getRootDirectory() {
    return rootDirectory;
  }

  public Directory getWorkingDirectory() {
    return workingDirectory;
  }

  public void setWorkingDirectory(Directory workingDirectory) {
    this.workingDirectory = workingDirectory;
  }

  public HashMap<String, Command> getCommands() {
    return commands;
  }

  public InputParser getParser() {
    return parser;
  }

  public StandardError getErrorHandler() {
    return errorHandler;
  }

  public PathHandler getPathHandler() {
    return pathHandler;
  }

  public ArrayList<String> getCommandHistory() {
    return commandHistory;
  }

  public Stack<Directory> getDirectoryStack() {
    return directoryStack;
  }


}
