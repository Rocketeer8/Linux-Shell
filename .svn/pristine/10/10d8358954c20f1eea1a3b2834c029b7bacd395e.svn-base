// **********************************************************
// Assignment2:
// Student1: Marcus Pasquariello
// UTORID user_name: pasqua39
// UT Student #: 1006258477
// Author: Marcus Pasquariello
//
// Student2: Aliel Jacob Roxas
// UTORID user_name: roxasal1
// UT Student #: 1005954781
// Author: Aliel Jacob Roxas
//
// Student3: Danny Liu
// UTORID user_name: liuhai6
// UT Student #: 1004258000
// Author: Danny Liu
//
// Student4: Brandon Lam
// UTORID user_name: lambran3
// UT Student #: 1003383484
// Author: Brandon Lam
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************

package commands;

import filesystem.Directory;
import filesystem.File;
import filesystem.FileSystem;
import handling.InputParser;
import handling.StandardError;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import output.Output;


public class Echo extends Command {

  /**
   * echo append object use for append content to a file.
   */
  EchoAppend echoAppendObj = new EchoAppend();

  /**
   * echo overwrite object use for overwrite content on a file.
   */
  EchoOverwrite echoOverwriteObj = new EchoOverwrite();

  /**
   * Setup valid argument counts for echo and its documentation.
   * 
   * @param validArgumentCounts Stores All the valid number of Argument counts
   *        for echo
   * 
   */
  public Echo(int[] validArgumentCounts) {
    super(validArgumentCounts);
    this.documentation = "echo STRING [> OUTFILE]"
        + "\n\tIf OUTFILE is not provided, print STRING on the shell. "
        + "\n\tOtherwise, put STRING into file OUTFILE. This creates a new "
        + "\n\tfile if OUTFILE does not exists and erases the old contents "
        + "\n\tif OUTFILE already exists.\n\n" + "echo STRING >> OUTFILE"
        + "\n\t Like the previous command, but appends instead of overwrites.";
  }


  /**
   * This class either call output print out a text message, or either append to
   * or overwrite the message to a text file given an operator and a name.
   * 
   * @param shellInput Arrays of command arguments
   */
  @Override
  public void execute(String[] shellInput) {
    /*
     * list must be size 1 or 3, if it's 3, the second element must be either
     * ">" or ">>"
     */
    List<String> arguments = this.getArguments(shellInput[0]);
    // invalid echo command
    if (arguments == null) {
      return;
    }
    super.execute(arguments.toArray(new String[0]));
    if (!isCountValid) {
      return;
    }
    // String already parsed
    String text = arguments.get(0);

    if (arguments.size() == 1) {
      noOutFileEcho(text);

    } else if (arguments.size() == 3) {
      File outFile = getOutfile(arguments.get(2));
      // invalid file name or name already exist
      if (outFile == null) {
        return;
      }

      if (arguments.get(1).equals(">>")) {
        // echoCommandList.get(2) is outfile, could be path or name
        echoAppendObj.append(text, outFile);
      } else {
        echoOverwriteObj.overwrite(text, outFile);
      }
    }
  }


  /**
   * Print out the given text on the mock shell using output.
   * 
   * @param text Text to be printed out on the mock shell.
   */
  private void noOutFileEcho(String text) {
    Output.println(text);
  }


  /**
   * If an append or overwrite operation is given, get the file from the given
   * path to store the text in , if the file doesn't exist, create a new one.
   * 
   * @param path The path to the file to store text in.
   * @return Return the file to store text in.
   */
  private File getOutfile(String path) {

    InputParser parser = FileSystem.getInstance().getParser();
    StandardError errorHandler = FileSystem.getInstance().getErrorHandler();

    // check for invalid path
    Directory parentDir = parser.parsePathToSecondLastDirectory(path);
    if (parentDir == null) {
      return null;
    }
    String fileName = parser.parsePathToName(path);

    // Outfile already exist
    if (parentDir.getSubFile(fileName) instanceof File) {
      return (File) parentDir.getSubFile(fileName);
    }

    // check for bad name or exist directory of the same name
    if (!(errorHandler.isValidFileName(fileName))
        || errorHandler.isDuplicateName(parentDir, fileName)) {
      return null;
    }

    // create the file as it doesn't exist.
    File outFile = new File(fileName);
    parentDir.addToDir(outFile);
    outFile.setParentDirectory(parentDir);

    return outFile;
  }


  /**
   * Analyze echo argument and split it into a list useful name, string, and
   * operation to perform echo.
   * 
   * @param rawEchoArg Initial echo argument from user.
   * @return A list of useful echo arguments.
   */
  private List<String> getArguments(String rawEchoArg) {
    StandardError errorHandler = FileSystem.getInstance().getErrorHandler();
    // split by "". separated it into three parts
    String[] splitedEchoArg = rawEchoArg.split("\"", 3);
    if (!errorHandler.isValidEchoArg(splitedEchoArg)) {
      return null;
    }
    // use linklist because it will give back a not fixed size list
    List<String> echoArg =
        new LinkedList<String>(Arrays.asList(splitedEchoArg));

    // the third part of splitedArg which is the operator and filename
    String[] operatorArg = echoArg.get(2).trim().split("\\s+");
    // separate no space operatorArg >filename or >>filename
    if (!operatorArg[0].equals(">") && !operatorArg[0].equals(">>")
        && !operatorArg[0].equals("")) {
      String fileName;
      // check if it's > or >>
      if (String.valueOf(operatorArg[0].charAt(1)).equals(">")) {
        fileName = operatorArg[0].substring(2, operatorArg[0].length());
        operatorArg = new String[] {">>", fileName};
      } else {
        fileName = operatorArg[0].substring(1, operatorArg[0].length());
        operatorArg = new String[] {">", fileName};
      }
    }
    // leave only the string
    echoArg.remove(0);
    echoArg.remove(1);
    // if exist >file or >>file argument, add them to the list
    if (!operatorArg[0].equals("")) {
      echoArg.addAll(Arrays.asList(operatorArg));
    }
    return echoArg;
  }
}
