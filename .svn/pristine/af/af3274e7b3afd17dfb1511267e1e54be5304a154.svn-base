package test;

import static org.junit.Assert.assertEquals;

import commands.History;
import filesystem.FileSystem;
import java.lang.reflect.Field;
import java.util.ArrayList;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class HistoryTest {

  FileSystem fileSystem;
  History history;
  ArrayList<String> commandHistory;

  @Before
  public void setUp() {
    fileSystem = FileSystem.getInstance();
    history = new History(new int[] {0, 1});
    commandHistory = fileSystem.getCommandHistory();
  }

  @After
  public void tearDown() throws Exception {
    Field field =
        (fileSystem.getClass()).getDeclaredField("shellInstance");
    field.setAccessible(true);
    field.set(null, null);
  }

  @Test
  public void testExecuteWithInvalidArg() {

    // Imitates user calling a command
    // Checks case when arg is a letter
    commandHistory.add("history a");
    assertEquals("Inv Num", history.execute(new String[] {"a"}));

    // Checks case when arg is a special character
    commandHistory.add("history ?");
    assertEquals("Inv Num", history.execute(new String[] {"?"}));

    // Checks case when arg has a decimal point
    commandHistory.add("history 1.0");
    assertEquals("Inv Num", history.execute(new String[] {"1.5"}));

    // Checks case when arg contains an integer, but is not an integer
    commandHistory.add("history 1a");
    assertEquals("Inv Num", history.execute(new String[] {"1a"}));

    // Checks case when arg is a negative integer
    commandHistory.add("history -1");
    assertEquals("Inv Num", history.execute(new String[] {"-1"}));
  }

  @Test
  public void testExecuteWithInvalidArgCount() {

    // Imitates user calling a command
    commandHistory.add("history 1 2");
    assertEquals("Inv Args", history.execute(new String[] {"1 2"}));
  }

  @Test
  public void testExecuteWithEmptyListNoArgs() {

    // Imitates user calling history
    commandHistory.add("history");
    assertEquals("1. history", history.execute(new String[] {}));
  }

  @Test
  public void testExecuteWithNonEmptyListNoArgs() {

    // Builds the string that is the expected output for this case
    StringBuilder expectedOutput = new StringBuilder();

    // Imitates how commands by user are stored to commandHistory
    for (int i = 0; i < 10; i++) {
      commandHistory.add("Input " + (i+1));
      expectedOutput.append(i+1)
          .append(". ")
          .append("Input ")
          .append(i+1)
          .append("\n");
    }

    // Imitates user calling history
    commandHistory.add("history");
    expectedOutput.append("11. history");

    assertEquals(expectedOutput.toString(), history.execute(new String[] {}));
  }

  @Test
  public void testExecuteWithEmptyListWithArgEqualToZero() {

    // Imitates user calling history 0
    commandHistory.add("history 0");
    assertEquals("",history.execute(new String[] {"0"}));
  }

  @Test
  public void testExecuteWithNonEmptyListWithArgEqualToZero() {

    // Imitates how commands by user are stored to commandHistory
    for (int i = 0; i < 10; i++) {
      commandHistory.add("Input " + (i+1));
    }

    // Imitates user calling history 0
    commandHistory.add("history 0");
    assertEquals("", history.execute(new String[] {"0"}));
  }

  @Test
  public void testExecuteWithEmptyListWithArgEqualToOne() {

    // Imitates user calling history 1
    commandHistory.add("history 1");
    assertEquals("1. history 1", history.execute(new String[] {"1"}));
  }

  @Test
  public void testExecuteWithNonEmptyListWithArgEqualToOne() {

    // Imitates how commands by user are stored to commandHistory
    for (int i = 0; i < 10; i++) {
      commandHistory.add("Input " + (i+1));
    }

    // Imitates user calling history 1
    commandHistory.add("history 1");
    assertEquals("11. history 1", history.execute(new String[] {"1"}));
  }

  @Test
  public void testExecuteWithEmptyListWithArgGreaterThanOne() {

    // Imitates user calling history 20
    commandHistory.add("history 20");
    assertEquals("1. history 20", history.execute(new String[]{"20"}));
  }

  @Test
  public void testExecuteWithNonEmptyListWithArgGreaterThanOne() {

    // Builds the string that is the expected output for this case
    StringBuilder expectedOutput = new StringBuilder();

    // Imitates how commands by user are stored to commandHistory
    for (int i = 0; i < 10; i++) {
      commandHistory.add("Input " + (i+1));

      // Only appends commands that are expected to appear
      if (i > 4) {
        expectedOutput.append(i+1)
            .append(". ")
            .append("Input ")
            .append(i+1)
            .append("\n");
      }
    }

    // Imitates user calling history 6
    commandHistory.add("history  6");
    expectedOutput.append("11. history  6");
    assertEquals
        (expectedOutput.toString(), history.execute(new String[] {"6"}));
  }
}