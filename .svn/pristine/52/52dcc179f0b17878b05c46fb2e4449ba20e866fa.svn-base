// **********************************************************
// Assignment2:
// Student1: Marcus Pasquariello
// UTORID user_name: pasqua39
// UT Student #: 1006258477
// Author: Marcus Pasquariello
//
// Student2: Aliel Jacob Roxas
// UTORID user_name: roxasal1
// UT Student #: 1005954781
// Author: Aliel Jacob Roxas
//
// Student3: Danny Liu
// UTORID user_name: liuhai6
// UT Student #: 1004258000
// Author: Danny Liu
//
// Student4: Brandon Lam
// UTORID user_name: lambran3
// UT Student #: 1003383484
// Author: Brandon Lam
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************

package driver;

import commands.Command;
import filesystem.FileSystem;
import handling.StandardError;
import java.util.Arrays;
import java.util.Scanner;

/**
 * The JShell class takes in the user input, and calls the appropriate methods
 * for executing the command.
 * 
 * @author Marcus
 *
 */
public class JShell {


  /**
   * Takes in the user input, parses the input into the command and its
   * arguments. If the command is valid, call the appropriate execute method,
   * otherwise prints an error message.
   * 
   */
  public static void main(String[] args) {

    Scanner scanner = new Scanner(System.in);
    FileSystem fileSystem = FileSystem.getInstance();
    StandardError errorHandler = fileSystem.getErrorHandler();


    while (!fileSystem.isCloseShell()) {
      String input = scanner.nextLine();
      // Skips everything if the input is only whitespace
      if (input.isBlank()) {
        continue;
      }

      // Splits the list into the command and the arguments
      String[] inputList = input.trim().split("\\s+", 2);
      String commandName = inputList[0];
      // Adding the input to command history
      fileSystem.getCommandHistory().add(input);
      if (errorHandler.isValidCommand(commandName)) {
        Command command = fileSystem.getCommands().get(commandName);
        // Executing the command
        command.execute(Arrays.copyOfRange(inputList, 1, inputList.length));
      }
    }
    scanner.close();
  }


}
