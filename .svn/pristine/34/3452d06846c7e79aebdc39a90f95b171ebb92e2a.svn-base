// **********************************************************
// Assignment2:
// Student1: Marcus Pasquariello
// UTORID user_name: pasqua39
// UT Student #: 1006258477
// Author: Marcus Pasquariello
//
// Student2: Aliel Jacob Roxas
// UTORID user_name: roxasal1
// UT Student #: 1005954781
// Author: Aliel Jacob Roxas
//
// Student3: Danny Liu
// UTORID user_name: liuhai6
// UT Student #: 1004258000
// Author: Danny Liu
//
// Student4: Brandon Lam
// UTORID user_name: lambran3
// UT Student #: 1003383484
// Author: Brandon Lam
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************
package commands;

import java.util.ArrayList;
import filesystem.Directory;
import filesystem.File;
import filesystem.FileObj;
import filesystem.FileSystem;
import handling.InputParser;
import output.Output;


/**
 * This class is responsible for listing content given directories/files path on
 * the mock shell.
 * 
 * @author Marcus, Danny
 *
 */
public class ListContent extends Command {

  /**
   * Setup valid argument counts for changeDirecotry and its documentation.
   * 
   * @param validArgumentCounts Stores All the valid number of Argument counts
   *        for changeDirecotry
   */
  public ListContent(int[] validArgumentCounts) {
    super(validArgumentCounts);
    this.documentation = "ls [PATH...]"
        + "\n\tIf no paths are given, print the contents (file or directory) "
        + "\n\tof the current directory, with a new line following each of the "
        + "\n\tcontent (file or directory)."
        + "\n\n\tOtherwise, for each path p, the order listed:"
        + "\n\n\t  • If p specifies a file, print p"
        + "\n\n\t  • If p specifies a directory, print p, a colon, then the "
        + "\n\t    contents of that directory, then an extra new line."
        + "\n\n\t  • If p does not exist, print a suitable message.";

  }

  /**
   * Given a list of files/directories, list their content one by one. with the
   * help of parser to get the directory and for potential errors. For a file,
   * listContent prints its name, for directory, 
   * listContent prints its subfiles.
   * 
   * @param shellInput Arrays of command arguments
   */
  public void execute(String[] shellInput) {

    InputParser parser = FileSystem.getInstance().getParser();
    FileSystem fileSystem = FileSystem.getInstance();
    
    // split the arguments, and check if the counts is correct.
    String[] arguments = super.getArguments(shellInput);
    super.execute(arguments);
    if (!isCountValid) {
      return;
    }
    
    // if no argument is given, list content of the current directory.
    if (arguments.length == 0) {
      lsOfDir(fileSystem.getWorkingDirectory());
    } else {
      for (String path : arguments) {
        // get target dir/file to list content
        FileObj fileObject = parser.parsePathToFileObj(path);

        // if the fileObject doesn't exist, return.
        if (fileObject == null) {
          return;
        }
        if (fileObject instanceof File) {
          // for a file, print the path
          Output.println(path);
        } else {
          // for a directory print path then all its content
          Output.println(path + ":");
          lsOfDir((Directory) fileObject);
        }
      }
    }

  }


  /**
   * A helper method for listing contents of a directory.
   * 
   * @param dir The directory where its subfiles will be listed
   */
  private void lsOfDir(Directory dir) {
    // for a directory, print all the names of its subfiles
    ArrayList<String> nameList = dir.subFileNameList();
    for (String name : nameList) {
      Output.println(name);
    }
    Output.println("");
  }
}
