// **********************************************************
// Assignment2:
// Student1: Marcus Pasquariello
// UTORID user_name: pasqua39
// UT Student #: 1006258477
// Author: Marcus Pasquariello
//
// Student2: Aliel Jacob Roxas
// UTORID user_name: roxasal1
// UT Student #: 1005954781
// Author: Aliel Jacob Roxas
//
// Student3: Danny Liu
// UTORID user_name: liuhai6
// UT Student #: 1004258000
// Author: Danny Liu
//
// Student4: Brandon Lam
// UTORID user_name: lambran3
// UT Student #: 1003383484
// Author: Brandon Lam
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************

package test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import commands.PushDirectory;
import filesystem.Directory;
import filesystem.File;
import filesystem.FileSystem;
import java.lang.reflect.Field;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * This class is responsible for for testing the PushDirectory class.
 *
 * @author Aliel
 */
public class PushDirectoryTest {

  /** The FileSystem instance used for testing. */
  FileSystem fileSystem;
  /** The PushDirectory instance to be tested */
  PushDirectory pushDir;

  /**
   * Initializes fileSystem and pushDir.
   */
  @Before
  public void setUp() {
    fileSystem = FileSystem.getInstance();
    pushDir = new PushDirectory(new int[] {1});
  }

  /**
   * Sets the singleton fileSystem object to null, for the purpose of testing
   * again.
   *
   * @throws Exception An exception PushDirectory can throw.
   */
  @After
  public void tearDown() throws Exception {
    Field field = (fileSystem.getClass()).getDeclaredField("shellInstance");
    field.setAccessible(true);
    field.set(null, null);
  }

  /**
   * Tests execute with root as the working directory.
   */
  @Test
  public void testExecuteWithRootAsWorkingDir() {
    Directory oldCurrentDir = fileSystem.getWorkingDirectory();

    // Creates expectedDir into root directory
    Directory expectedDir = new Directory("expectedDir");
    expectedDir.setParentDirectory(fileSystem.getRootDirectory());
    fileSystem.getRootDirectory().addToDir(expectedDir);

    // Creates argument for execute
    String[] args = {"expectedDir"};
    assertEquals(expectedDir, pushDir.execute(args));
    assertEquals(oldCurrentDir, fileSystem.getDirectoryStack().pop());
  }

  /**
   * Tests execute with an invalid argument count.
   */
  @Test
  public void testExecuteWithInvalidArgCount() {
    Directory oldCurrentDir = fileSystem.getWorkingDirectory();

    // Checks case with no arg
    assertNull(pushDir.execute(new String[] {}));

    // Checks case with multiple args, arg types do not matter
    assertNull(pushDir.execute(new String[] {"1 ?"}));

    // Checks that the current directory is unchanged
    assertEquals(oldCurrentDir, fileSystem.getWorkingDirectory());
  }

  /**
   * Tests execute with a Directory that is not in the file system.
   */
  @Test
  public void testExecuteWithNonExistentDirectory() {
    Directory rootDir = fileSystem.getRootDirectory();

    // Checks while no other files or directories exist
    assertNull(pushDir.execute(new String[] {"notInSystem"}));
    // Checks the working directory did not change
    assertEquals(rootDir, fileSystem.getWorkingDirectory());

    // Populating FileSystem with directory
    Directory tempAddedDir = new Directory("Dir1");
    tempAddedDir.setParentDirectory(rootDir);
    rootDir.addToDir(tempAddedDir);

    // Changes the current working directory
    fileSystem.setWorkingDirectory(tempAddedDir);


    // Checks while other files or directories exist
    assertNull(pushDir.execute(new String[] {"notInSystem"}));
    // Checks the working directory did not change
    assertEquals(tempAddedDir, fileSystem.getWorkingDirectory());
  }

  /**
   * Tests execute with a File in the file system.
   */
  @Test
  public void testExecuteWithAExistingFile() {

    // Setting a working directory
    Directory rootDir = fileSystem.getRootDirectory();

    // Populating FileSystem with file
    File file = new File("fileObj");
    file.setParentDirectory(rootDir);
    rootDir.addToDir(file);

    // Checks while Directory fileObj does not exist
    assertNull(pushDir.execute(new String[] {"fileObj"}));
    // Checks that the current directory is unchanged
    assertEquals(rootDir, fileSystem.getWorkingDirectory());
  }

  /**
   * Tests execute with a relative path.
   */
  @Test
  public void testExecuteWithRelativePath() {

    // Creates the current directory so that it is not the root
    Directory oldCurrentDir = new Directory("oldDir");
    oldCurrentDir.setParentDirectory(fileSystem.getRootDirectory());
    fileSystem.getRootDirectory().addToDir(oldCurrentDir);
    fileSystem.setWorkingDirectory(oldCurrentDir);

    // Creates expectedDir into root directory
    Directory expectedDir = new Directory("expectedDir");
    expectedDir.setParentDirectory(fileSystem.getWorkingDirectory());
    fileSystem.getWorkingDirectory().addToDir(expectedDir);

    // Creates argument for execute
    String[] args = {"expectedDir"};
    assertEquals(expectedDir, pushDir.execute(args));
    assertEquals(oldCurrentDir, fileSystem.getDirectoryStack().pop());
  }

  /**
   * Tests execute with an absolute path.
   */
  @Test
  public void testExecuteWithAbsolutePath() {

    // Creates the current directory so that it is not the root
    Directory oldCurrentDir = new Directory("oldDir");
    oldCurrentDir.setParentDirectory(fileSystem.getRootDirectory());
    fileSystem.getRootDirectory().addToDir(oldCurrentDir);
    fileSystem.setWorkingDirectory(oldCurrentDir);

    // Creates expectedDir into root directory
    Directory expectedDir = new Directory("expectedDir");
    expectedDir.setParentDirectory(fileSystem.getRootDirectory());
    fileSystem.getRootDirectory().addToDir(expectedDir);

    // Creates argument for execute
    String[] args = {"/expectedDir"};
    assertEquals(expectedDir, pushDir.execute(args));
    assertEquals(oldCurrentDir, fileSystem.getDirectoryStack().pop());
  }
}
