// **********************************************************
// Assignment2:
// Student1: Marcus Pasquariello
// UTORID user_name: pasqua39
// UT Student #: 1006258477
// Author: Marcus Pasquariello
//
// Student2: Aliel Jacob Roxas
// UTORID user_name: roxasal1
// UT Student #: 1005954781
// Author: Aliel Jacob Roxas
//
// Student3: Danny Liu
// UTORID user_name: liuhai6
// UT Student #: 1004258000
// Author: Danny Liu
//
// Student4: Brandon Lam
// UTORID user_name: lambran3
// UT Student #: 1003383484
// Author: Brandon Lam
//
//
// Honor Code: I pledge that this program represents my own
// program code and that I have coded on my own. I received
// help from no one in designing and debugging my program.
// I have also read the plagiarism section in the course info
// sheet of CSC B07 and understand the consequences.
// *********************************************************

package test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import commands.PopDirectory;
import filesystem.Directory;
import filesystem.FileSystem;
import java.lang.reflect.Field;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * This class is responsible for for testing the PopDirectory class.
 *
 * @author Aliel
 */
public class PopDirectoryTest {

  /** The FileSystem instance used for testing. */
  FileSystem fileSystem;
  /** The PopDirectory instance to be tested */
  PopDirectory popDir;

  /**
   * Initializes fileSystem and popDir.
   */
  @Before
  public void setUp() {
    fileSystem = FileSystem.getInstance();
    popDir = new PopDirectory(new int[] {0});
  }

  /**
   * Sets the singleton fileSystem object to null, for the purpose of testing
   * again.
   *
   * @throws Exception An exception PopDirectory can throw.
   */
  @After
  public void tearDown() throws Exception {
    Field field = (fileSystem.getClass()).getDeclaredField("shellInstance");
    field.setAccessible(true);
    field.set(null, null);
  }

  /**
   * Tests execute with an invalid argument count.
   */
  @Test
  public void testExecuteWithInvalidArgCount() {

    // Checks case with one arg
    assertNull(popDir.execute(new String[] {"a"}));

    // Checks case with multiple args, arg types do not matter
    assertNull(popDir.execute(new String[] {"1 ?"}));
  }

  /**
   * Tests execute with an empty directoryStack.
   */
  @Test
  public void testExecuteWithEmptyDirStack() {
    Directory expectedWorkingDir = fileSystem.getWorkingDirectory();

    assertTrue(fileSystem.getDirectoryStack().isEmpty());
    assertNull(null, popDir.execute(new String[] {}));
    assertEquals(expectedWorkingDir, fileSystem.getWorkingDirectory());
  }

  /**
   * Tests execute with a non-empty directoryStack.
   */
  @Test
  public void testExecuteWithNonEmptyDirStack() {

    // Populate file system wit directories, and add them to directory stack
    for (int i = 0; i < 5; i++) {
      Directory tempDir = new Directory("Dir" + (i + 1));
      tempDir.setParentDirectory(fileSystem.getRootDirectory());
      fileSystem.getRootDirectory().addToDir(tempDir);
      fileSystem.getDirectoryStack().add(tempDir);
    }

    // Check that each one gets popped until the stack becomes empty
    for (int i = 0; i < 5; i++) {
      Directory expectedDir = fileSystem.getDirectoryStack().peek();
      assertEquals(expectedDir, popDir.execute(new String[] {}));
    }

    // Checks that all the directory stacks are removed
    assertTrue(fileSystem.getDirectoryStack().isEmpty());
    assertNull(popDir.execute(new String[] {}));
  }

  /**
   * Tests execute with a non-empty directoryStack, but with some Directories in
   * the stack removed from the file system.
   */
  @Test
  public void testExecuteWithNonEmptyDirStackWithRemovedDirectories() {
    Directory expectedDir = null;

    // Populate file system wit directories, and add them to directory stack
    for (int i = 0; i < 5; i++) {
      Directory tempDir = new Directory("Dir" + (i + 1));

      /*
       * Imitates how Dir2, 3, 4, and 5 were removed from file system by making
       * it so that their parent is null and does not exist in the file system
       */
      if (i == 0) {
        expectedDir = tempDir;
        tempDir.setParentDirectory(fileSystem.getRootDirectory());
        fileSystem.getRootDirectory().addToDir(tempDir);
      }

      fileSystem.getDirectoryStack().add(tempDir);
    }

    // Check to see that popDir skips over removed directories
    assertEquals(expectedDir, popDir.execute(new String[] {}));

    // Checks that all the directory stacks are removed
    assertTrue(fileSystem.getDirectoryStack().isEmpty());
    assertNull(popDir.execute(new String[] {}));
  }
}
